## bfs나 dfs로 풀되 파란구슬이 밖으로 나가게 되면 종료.
# 들렀던 곳을 다시 들러야 하는 경우도 발생할 수 있다.
# 더 이상 움직이지 않을때까지 기울인다.
# 한번 움직이고 난 후에는 무조건 셋중에 한방향으로만 갈 수 있다.

# 어느 방향이 나은지는 솔직히 알 수 없다.
# 모든 방향의 경우를 가보는 수 밖에...?


# 그럼 시간복잡도는 어떻게 나올까 
# 4 * 3**9  == 78732

# 모든 경우의 수를 다 돌아봐도 이정도밖에 안나오면 생각보다 혜자인데??

# 그럼 이 경우들 중에서 최소인 경우를 찾으면 되잖아.

# 제한 조건 1. 파란 구슬이 나가면 안됨.
# 제한 조건 2. 움직이는 횟수가 10이 넘어가면 안됨.
# 제한 조건 3. 최소한의 경우만을 찾아내야 함.

# 그럼 dfs로 구현한다고 생각해보자

# 깊이우선탐색이므로 가장 깊게까지 접은을 해서 red가 0에 도달하면 그 cnt값을 return
# 모든 리턴값들을 받은 뒤에 그중 가장 적은 수를 찾는 법.


# 혹은 bfs로 구현한다면 너비 우선 탐색을 진행하는데

# 너비 우선 탐색은 불려온 부모의 cnt값에 +1을 해서 진행하다 r만 구멍에 도달할 수 있으면
# 그때 바로 cnt를 리턴?